//Codice scrittura dati accelerometro e gps
//il file logga purtroppo alla frequenza di un campionamento al secondo

//Codice scrittura dati accelerometro e gps
#include <SPI.h>
#include <SdFat.h>
#include <Wire.h>
#include <NMEAGPS.h>

#define ARDUINO_USD_CS 10 // uSD card CS pin (pin 10 on SparkFun GPS Logger Shield)


//Definizione delle librerie e oggetti necessarie all'acquisizione dei dati da GPS


NMEAGPS gps;          // NeoGPS object to be used throughout
gps_fix fix;          // The latest GPS information received from the gpsPort
bool    newGPSdata;   // true when a new GPS fix needs to be logged
#define GPS_BAUD 9600 // GPS module's default baud rate

#include <AltSoftSerial.h>
AltSoftSerial gpsPort; // Always on pins 8 & 9

#define SerialMonitor Serial

#define MAX_LOG_FILES 100 // Number of log files that can be made
char logFileName[] = "gpslogXX.csv";


#define LOG_COLUMN_HEADER \
  "longitude," "latitude," "altitude," "speed," "course," "date," "time," \
  "satellites," "LastLog," "Acc.X," "Acc.Y," "Acc.Z," "Gy.X," "Gy.Y," "Gy.Z,"

#define LOG_RATE 1000         // Log every 1 milliseconds
unsigned long lastLog = 0;      // Global var to keep of last time we logged
const int MPU=0x68;         // I2C address of the MPU-6050
int16_t AcX,AcY,AcZ,GyX,GyY,GyZ;


// SD definition
SdFat SD;
File  dataFile;

void setup()
{
  Wire.begin();
  Wire.beginTransmission(MPU);
  Wire.write(0x6B);  // PWR_MGMT_1 register
  Wire.write(0);     // set to zero (wakes up the MPU-6050)
  Wire.endTransmission(true);

  gpsPort.begin(GPS_BAUD);

  SerialMonitor.begin(9600);
  SerialMonitor.println( F("Setting up SD card.") );

  // see if the card is present and can be initialized:
  if (!SD.begin(ARDUINO_USD_CS)) {
    SerialMonitor.println( F("Error initializing SD card.") );
  } else {
    updateFileName(); // Each time we start, create a new file, increment the number
    dataFile = SD.open( logFileName, FILE_WRITE );
    // Print a header at the top of the new file
    dataFile.println( F(LOG_COLUMN_HEADER) );
    if (!dataFile.isOpen())
      SerialMonitor.println( F("Failed to open GPS dataFile") );
  }

} // setup


void loop()
{
  //  Check for new GPS data
  if (gps.available( gpsPort )) {
    fix        = gps.read();  // get the entire fix structure, once per second
    newGPSdata = true;
  }

  // Is it time to take an MPU sample?
  if ((micros() - lastLog) > LOG_RATE) {
    lastLog = micros();

    // Yes, read the registers
    Wire.beginTransmission( MPU );
    Wire.write( 0x3B );  // starting with register 0x3B (ACCEL_XOUT_H)
    Wire.endTransmission(false);
    Wire.requestFrom( MPU, 14, true );   // request a total of 14 registers

    AcX = Wire.read()<<8;
    AcX|= Wire.read();     // 0x3B (ACCEL_XOUT_H) & 0x3C (ACCEL_XOUT_L)
    AcY = Wire.read()<<8;
    AcY|= Wire.read();     // 0x3D (ACCEL_YOUT_H) & 0x3E (ACCEL_YOUT_L)
    AcZ = Wire.read()<<8;
    AcZ|= Wire.read();     // 0x3F (ACCEL_ZOUT_H) & 0x40 (ACCEL_ZOUT_L)
    GyX = Wire.read()<<8;
    GyX|= Wire.read();     // 0x43 (GYRO_XOUT_H)  & 0x44 (GYRO_XOUT_L)
    GyY = Wire.read()<<8;
    GyY|= Wire.read();     // 0x45 (GYRO_YOUT_H)  & 0x46 (GYRO_YOUT_L)
    GyZ = Wire.read()<<8;
    GyZ|= Wire.read();     // 0x47 (GYRO_ZOUT_H)  & 0x48 (GYRO_ZOUT_L)

    logGPSData();  //  Write out GPS data first...
    logMPUdata();  //  ...then write the MPU data.

    //  If we had new GPS data, clear the flag and flush the file
    if (newGPSdata) {
      newGPSdata = false;
      fix     .init (); // empty out the fix structure
      dataFile.flush(); // checkpoint the SD file once per second
    }
  }

} // loop


static void logGPSData()
{
  // Print longitude, latitude, altitude (in feet), speed (in mph), course
  // in (degrees), date, time, and number of satellites.
  //  NOTE:  This only prints commas if the fix is empty (initialized).

  if (fix.valid.location)
    dataFile.print(fix.longitude(), 6);
  dataFile.print(',');
  if (fix.valid.location)
    dataFile.print(fix.latitude(), 6);
  dataFile.print(',');
  if (fix.valid.altitude)
    dataFile.print(fix.altitude() * 3.2808, 1);
  dataFile.print(',');
  if (fix.valid.speed)
    dataFile.print(fix.speed_mph(), 1);
  dataFile.print(',');
  if (fix.valid.heading)
    dataFile.print(fix.heading(), 1);
  dataFile.print(',');

  if (fix.valid.date) {
    dataFile.print( fix.dateTime.full_year() );
    if (fix.dateTime.month < 10)
      dataFile.print( '0' );
    dataFile.print( fix.dateTime.month );
    if (fix.dateTime.date < 10)
      dataFile.print( '0' );
    dataFile.print( fix.dateTime.date );
  }
  dataFile.print(',');

  if (fix.valid.time) {
    if (fix.dateTime.hours < 10)
      dataFile.print( '0' );
    dataFile.print( fix.dateTime.hours );
    if (fix.dateTime.minutes < 10)
      dataFile.print( '0' );
    dataFile.print( fix.dateTime.minutes );
    if (fix.dateTime.seconds < 10)
      dataFile.print( '0' );
    dataFile.print( fix.dateTime.seconds );
  }
  dataFile.print(',');

  if (fix.valid.satellites)
    dataFile.print(fix.satellites);

  dataFile.print(',');

} // logGPSData


static void logMPUdata()
{
  //Printing the mpu6050 information
  dataFile.print  (lastLog); dataFile.print(',');
  dataFile.print  (AcX);     dataFile.print(',');
  dataFile.print  (AcY);     dataFile.print(',');
  dataFile.print  (AcZ);     dataFile.print(',');
  dataFile.print  (GyX);     dataFile.print(',');
  dataFile.print  (GyY);     dataFile.print(',');
  dataFile.println(GyZ);

} // logMPUdata


// updateFileName() - Looks through the log files already present on a card,
// and creates a new file with an incremented file index.
void updateFileName()
{
  for (uint8_t i; i < MAX_LOG_FILES; i++)
  {
    // Set logFileName to "gpslogXX.csv":
    logFileName[6] = (i/10) + '0';
    logFileName[7] = (i%10) + '0';
    if (!SD.exists(logFileName))
      break; // We found our index

    SerialMonitor.print(logFileName);
    SerialMonitor.println( F(" exists") );
  }
  SerialMonitor.print( F("File name: ") );
  SerialMonitor.println(logFileName);

} 
